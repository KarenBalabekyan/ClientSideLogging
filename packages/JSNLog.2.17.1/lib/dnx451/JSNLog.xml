<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JSNLog</name>
    </assembly>
    <members>
        <member name="M:JSNLog.Infrastructure.ConfigProcessor.ProcessRoot(System.String,System.Text.StringBuilder,System.String)">
            <summary>
            Processes a configuration (such as the contents of the jsnlog element in web.config).
            
            The configuration is processed into JavaScript, which configures the jsnlog client side library.
            </summary>
            <param name="requestId">
            requestId to be passed to the JSNLog library when setting its options.
            Could be null (when user didn't provide a request id).
            In that case, this method creates a request id itself.
            </param>
            <param name="sb">
            All JavaScript needs to be written to this string builder.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.ConfigProcessor.GenerateCreateJavaScript(System.Collections.Generic.IEnumerable{JSNLog.ICanCreateElement},System.Text.StringBuilder,System.Func{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32@)">
            <summary>
            Generates JavaScript code for all passed in elements.
            </summary>
            <param name="elements"></param>
            <param name="sb">
            The JavaScript code is added here.
            </param>
            <param name="virtualToAbsoluteFunc"></param>
            <param name="appenderNames"></param>
            <param name="sequence">
            When the method is called, this number is not used with any element.
            When the method returns, it ensures that a number is returned that is not used with any element.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateSetOptions(System.String,JSNLog.ICanCreateJsonFields,System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,System.String},System.Text.StringBuilder,System.Collections.Generic.IList{System.String})">
            <summary>
            Generates the JavaScript to set options on an object
            </summary>
            <param name="parentName">
            Name of the JavaScript variable that holds the object.
            </param>
            <param name="element">
            The object (logger, etc.) whose fields are to be converted to options.
            </param>
            <param name="sb">
            The JavaScript code is added to this StringBuilder.
            </param>
            <param name="initialJsonFields">
            If not null, the fields in this array will be included in the JSON object passed to the setOptions method. 
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.AddJsonField(System.Collections.Generic.IList{System.String},System.String,System.String,JSNLog.ValueInfos.IValueInfo)">
            <summary>
            Creates a JSON field of the form:
            "field name": "field value"
            
            This string is added to jsonFields.
            
            If value is null or empty, nothing is added.
            </summary>
            <param name="jsonFields"></param>
            <param name="jsonFieldName">
            Name of the field, without quotes. Will not be escaped.
            </param>
            <param name="value">
            The unescaped value.
            </param>
            <param name="valueInfo">
            Used to validate the value, and to convert it to proper JavaScript.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateCreate(System.String,System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generates the JavaScript create an object.
            </summary>
            <param name="objectVariableName"></param>
            <param name="createMethodName"></param>
            <param name="name">
            Name of the object as known to the user. For example the appender name.
            </param>
            <param name="sb"></param>
        </member>
        <member name="M:JSNLog.Infrastructure.JavaScriptHelpers.GenerateLogger(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Generate the JavaScript to create a logger. 
            </summary>
            <param name="loggerVariableName">
            New logger object will be assigned to this JS variable.
            </param>
            <param name="loggerName">
            Name of the logger. Could be null (for the root logger).
            </param>
            <param name="sb">
            JS code will be appended to this.
            </param>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.IntToLevel(System.Int32)">
            <summary>
            Converts a number to a level.
            
            Each level is associated with a value. If the number is equal to or lower than a level, but higher than the previous level, than 
            that level is used. So if:
            
            TRACE = 1000,
            DEBUG = 2000,
            INFO = 3000,
            WARN = 4000,
            ERROR = 5000,
            FATAL = 6000
            
            And the number is: 2500, than this method returns INFO.
            
            If the number is greater than FATAL (highest level), than FATAL is returned.
            If the number is lower than TRACE, than TRACE is returned.
            
            This method assumes that the Level enum is sorted by value!
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.HighestLevel">
            <summary>
            Returns the highest level
            as given in Level enum.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.ParseLevel(System.String)">
            <summary>
            Parses a string with the name or value of a level.
            </summary>
            <param name="levelString"></param>
            <returns>
            null if levelString is null.
            Otherwise, the actual level.
            </returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.PredefinedName(System.String)">
            <summary>
            Returns the friendly name of the given level if possible.
            
            If level is a number matching one of the predefined levels, that level's name is returned.
            Otherwise, level is returned.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.LevelNumber(System.String)">
            <summary>
            Determines the numeric value of a level.
            If level is a number, returns the number.
            If level is a predefined level name, returns number corresponding to that level.
            Otherwise throws exception.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LevelUtils.ValidateLevel(System.String)">
            <summary>
            Throws exception if level is not a valid level.
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:JSNLog.Infrastructure.LoggingUrlHelpers.IsLoggingUrl(System.String)">
            <summary>
            Returns true if a request with the given url is a logging request that should be handled
            by JSNLog.
            
            Note that the user may have set the defaultUrl or an appender url because they want to use
            the standard url /jsnlog.logger for something else. So you don't want to always allow 
            /jsnlog.logger.
            
            On the other hand, it is impossible to figure out exactly what urls the user has used, because you
            don't know which loggers are being used in the user's code.
            So you can't only match against the urls specified with the appenders.
            
            So this method assumes that in addition to the appenders that have been configured,
            the default appender is also used. That is, it also passes the defaultUrl set by the user
            (and if that is not set, the defaultDefaultUrl).
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LoggingUrlHelpers.ResolvedAppenderUrl(System.String,System.String,System.String)">
            <summary>
            Returns the end of the url that an AjaxAppender will send its log requests to.
            Note that this is not the complete url, it may not have the domain, etc.
            </summary>
            <param name="defaultDefaultUrl">
            The default url when user does not provide a url at all.
            </param>
            <param name="defaultUrl">
            DefaultUrl given to the library
            </param>
            <param name="appenderUrl">
            Url given to the appender.
            </param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LogMessageHelpers.DeserializeIfPossible(System.String)">
            <summary>
            Tries to deserialize msg.
            If that works, returns the resulting object.
            Otherwise returns msg itself (which is a string).
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LogMessageHelpers.IsJsonString(System.String)">
            <summary>
            Returns true if the msg contains a valid JSON string.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.LogMessageHelpers.EnsureValidJson(System.String)">
            <summary>
            Takes a log message and finds out if it contains a valid JSON string.
            If so, returns it unchanged.
            
            Otherwise, surrounds the string with quotes (") and escapes the string for JavaScript.
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.RequestId.IISRequestId(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Creates an ID that is unique hopefully.
            
            This method initially tries to use the request id that IIS already uses internally. This allows us to correlate across even more log files.
            If this fails, for example if this is not part of a web request, than it uses a random GUID.
            
            See
            http://blog.tatham.oddie.com.au/2012/02/07/code-request-correlation-in-asp-net/
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.RequestId.GetLogRequestId(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Gets the request id from an HTTP header in the request.
            Every log request sent by jsnlog.js should have such a header.
            However, requests not sent by jsnlog.js will not have this header obviously.
            
            If the request id cannot be found, returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.RequestId.GetRequestId(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Gets an id, that is unique to this request. 
            That is, for the same request, this method always returns the same string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.Utils.UtcToLocalDateTime(System.DateTime)">
            <summary>
            Takes a DateTime in UTC and returns the same timestamp in local time.
            </summary>
            <param name="utcTime"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.Utils.AbsoluteUrl(System.String,System.Func{System.String,System.String})">
            <summary>
            The given url may be virtual (starts with ~). This method returns a version of the url that is not virtual.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.Infrastructure.XmlHelpers.DeserialiseXml``1(System.Xml.XmlNode)">
            <summary>
            Takes an XML element and converts it to an object of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlNoot"></param>
            <returns></returns>
        </member>
        <member name="T:JSNLog.LogHandling.LoggerProcessor.LogRequestSingleMsg">
            <summary>
            The log data sent in a single log request from the client.
            It is expected that this list has 2 items:
            * the requestId (key: r)
            * the array with log items (key: lg)
            </summary>
        </member>
        <member name="M:JSNLog.LogHandling.LoggerProcessor.ProcessLogRequest(System.String,JSNLog.LogRequestBase,System.DateTime,System.String,System.String,JSNLog.LogHandling.LogResponse)">
            <summary>
            Processes the incoming request. This method is not depended on the environment and so can be unit tested.
            Note that the incoming request may not be the POST request with log data.
            
            Effect of this method:
            * setting StatusCode on the response parameter
            * adding headers to the response parameter
            * logging contents of log request
            </summary>
            <param name="json">
            JSON payload in the incoming request
            </param>
            <param name="logRequestBase">
            * Type of browser that sent the request
            * IP address that sent the address
            * Url that the request was sent to
            * Request Id sent as part of the request
            * Request data to be given to onLogging event handler
            </param>
            <param name="serverSideTimeUtc">Current time in UTC</param>
            <param name="httpMethod">HTTP method of the request</param>
            <param name="origin">Value of the Origin request header</param>
            <param name="response">
            Empty response object. This method can add headers, etc.
            </param>
        </member>
        <member name="M:JSNLog.LogHandling.LoggerProcessor.ProcessLogRequestExec(System.String,JSNLog.LogRequestBase,System.DateTime,JSNLog.JsnlogConfiguration)">
            <summary>
            Processes a request with logging info. Unit testable.
            
            Returns log info in easily digestable format.
            </summary>
            <param name="json">JSON sent from client by AjaxAppender</param>
            <param name="serverSideTimeUtc">Current time in UTC</param>
            <param name="jsnlogConfiguration">Contains all config info</param>
        </member>
        <member name="M:JSNLog.LogHandling.LoggerProcessor.SafeGet(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Returns the value associated with a key in a dictionary.
            If the key is not present, returns the default value - rather than throwing an exception.
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:JSNLog.ApplicationBuilderExtensions.UseJSNLog(Microsoft.AspNet.Builder.IApplicationBuilder,JSNLog.ILoggingAdapter,JSNLog.JsnlogConfiguration)">
            <summary>
            Normally, an ASP.NET 5 app would simply call this to insert JSNLog middleware into the pipeline.
            Note that the loggingAdapter is required, otherwise JSNLog can't hand off log messages.
            It can live without a configuration though (it will use default settings).
            </summary>
            <param name="builder"></param>
            <param name="loggingAdapter"></param>
            <param name="jsnlogConfiguration"></param>
        </member>
        <member name="T:JSNLog.JSNLogMiddleware">
            <summary>
            Note that the OWIN counterpart of this (also in namespace JSNLog) 
            already has name JSNLogMiddlewareComponent
            </summary>
        </member>
        <member name="M:JSNLog.JavascriptLogging.Configure(Microsoft.AspNet.Http.HttpContext,System.String)">
            <summary>
            Call this method for every request to generate a script tag with JavaScript
            that configures all loggers and appenders, based on the jsnlog element in the web.config.
            </summary>
            <param name="requestId">
            Request Id to be included in all logging requests sent by jsnlog.js from the client.
            If null, a new request id will be generated (the same one that will be returned from RequestId method).
            </param>
            <returns>
            A script tag with the JavaScript to do all configuration.
            </returns>
        </member>
        <member name="M:JSNLog.JavascriptLogging.RequestId(Microsoft.AspNet.Http.HttpContext)">
            <summary>
            Returns a request id that is unique to this request.
            
            However, if the request is a log request from jsnlog.js, than this method returns the requestId travelling 
            in the request.
            
            The site can call this method to get the request id for use in server side logging.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JSNLog.ICanCreateElement">
            <summary>
            Elements (loggers, etc.) that implement this interface can generate JavaScript that 
            creates the element.
            
            These elements must have a display name that can be used in exceptions.
            </summary>
        </member>
        <member name="M:JSNLog.ICanCreateElement.CreateElement(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Func{System.String,System.String})">
            <summary>
            Creates JavaScript code that creates the element. For example JL("loggername").setOptions(...);
            for a logger.
            </summary>
            <param name="sb">
            The JavaScript code is added to this.
            </param>
            <param name="appenderNames">
            Provides mapping from appender configuration names to their JavaScript names.
            Appenders add their details to this.
            </param>
            <param name="sequence">
            Every call to this method receives a unique sequence number.
            Used to create unique JavaScript names.
            </param>
            <param name="virtualToAbsoluteFunc">
            Used to translate virtual paths.
            </param>
        </member>
        <member name="T:JSNLog.ICanCreateJsonFields">
            <summary>
            Classes (loggers, etc.) that implement this interface can generate 
            JSON name-value fields based on their properties. These fields are used in the
            JSON object passed to setOptions.
            </summary>
        </member>
        <member name="M:JSNLog.ICanCreateJsonFields.AddJsonFields(System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Func{System.String,System.String})">
            <summary>
            Creates JSON fields for a JSON object that will be passed to setOptions
            for the element (logger, etc.) that implementes this interface.
            </summary>
            <param name="jsonFields">
            The JSON fields are added to this.
            </param>
            <param name="appenderNames"></param>
            <param name="virtualToAbsoluteFunc"></param>
        </member>
        <member name="T:JSNLog.ValueInfos.IValueInfo">
            <summary>
            This describes a class that describes how to handle values.
            </summary>
        </member>
        <member name="M:JSNLog.ValueInfos.IValueInfo.ToJavaScript(System.String)">
            <summary>
            Takes a value and converts it to a JavaScript value.
            Note that this method takes care of quoting strings (and not quoting numbers and booleans).
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
    </members>
</doc>
